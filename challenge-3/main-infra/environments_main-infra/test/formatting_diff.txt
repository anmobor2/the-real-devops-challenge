main.tf
--- old/main.tf
+++ new/main.tf
@@ -10,32 +10,32 @@
 module "vpc" {
   source = "./modules/vpc"
 
-  name                = var.vpc_name
-  cidr                = var.vpc_cidr
-  azs                 = var.vpc_azs
-  public_subnets      = var.vpc_public_subnets
-  private_subnets     = var.vpc_private_subnets
-  enable_nat_gateway  = var.vpc_enable_nat_gateway
-  tags                = var.vpc_tags
+  name               = var.vpc_name
+  cidr               = var.vpc_cidr
+  azs                = var.vpc_azs
+  public_subnets     = var.vpc_public_subnets
+  private_subnets    = var.vpc_private_subnets
+  enable_nat_gateway = var.vpc_enable_nat_gateway
+  tags               = var.vpc_tags
 }
 
 module "autoscaling" {
   source = "./modules/autoscaling"
 
   # Atributos básicos del ASG
-  name                 = var.autoscaling_name
-  min_size             = var.autoscaling_min_size
-  max_size             = var.autoscaling_max_size
-  desired_capacity     = var.autoscaling_desired_capacity
+  name             = var.autoscaling_name
+  min_size         = var.autoscaling_min_size
+  max_size         = var.autoscaling_max_size
+  desired_capacity = var.autoscaling_desired_capacity
   # Atributo adicional para el ASG
-  vpc_zone_identifier  = module.vpc.private_subnets
-  health_check_type   = var.autoscaling_health_check_type
+  vpc_zone_identifier       = module.vpc.private_subnets
+  health_check_type         = var.autoscaling_health_check_type
   health_check_grace_period = var.autoscaling_health_check_grace_period
   # Referencias a otros recursos
-  launch_template_id = module.launch_template.launch_template_id
+  launch_template_id      = module.launch_template.launch_template_id
   launch_template_version = module.launch_template.launch_template_latest_version
-  subnet_ids          = module.vpc.private_subnets
-#  target_group_arns    = module.alb.target_group_arns
+  subnet_ids              = module.vpc.private_subnets
+  #  target_group_arns    = module.alb.target_group_arns
 
   target_group_arns = [
     module.target_group_http.target_group_arn,
\ No newline at end of file
@@ -47,92 +47,92 @@
     version = module.launch_template.launch_template_latest_version
   }
 
-  ingress_rules = var.security_group_ingress_rules 
+  ingress_rules = var.security_group_ingress_rules
   egress_rules  = var.security_group_egress_rules
 
   tags = var.autoscaling_tags
 
   instance_tag_name = var.instance_tag_name
-  depends_on = [module.vpc]
+  depends_on        = [module.vpc]
 }
 
 module "launch_template" {
   source = "./modules/launch_template"
 
-  launch_template_name_prefix = var.launch_template_name_prefix
-  launch_template_image_id = var.launch_template_image_id
-  launch_template_instance_type = var.launch_template_instance_type
+  launch_template_name_prefix    = var.launch_template_name_prefix
+  launch_template_image_id       = var.launch_template_image_id
+  launch_template_instance_type  = var.launch_template_instance_type
   launch_template_user_data_file = base64encode(file(abspath("${path.root}/user_data.sh")))
-  launch_template_volume_size = 1
-  launch_template_tags = var.launch_template_tags
-  security_group_id = module.alb_security_group.alb_security_group_id
+  launch_template_volume_size    = 1
+  launch_template_tags           = var.launch_template_tags
+  security_group_id              = module.alb_security_group.alb_security_group_id
 }
 
 module "alb" {
   source = "./modules/alb"
-  
-  name               = var.alb_name
-  internal           = var.alb_internal
-  security_groups    = [module.alb_security_group.alb_security_group_id]
-  subnets            = module.vpc.public_subnets
-  target_group_port  = var.target_group_port
+
+  name                  = var.alb_name
+  internal              = var.alb_internal
+  security_groups       = [module.alb_security_group.alb_security_group_id]
+  subnets               = module.vpc.public_subnets
+  target_group_port     = var.target_group_port
   target_group_protocol = var.target_group_protocol
-  vpc_id             = module.vpc.vpc_id
+  vpc_id                = module.vpc.vpc_id
 
-  tags               = var.alb_tags
+  tags = var.alb_tags
 
   load_balancer_type = var.alb_load_balancer_type
 
   target_groups = {
-    "project-intely-tg" = module.target_group_http.target_group_arn,
+    "project-intely-tg"       = module.target_group_http.target_group_arn,
     "project-intely-tg-https" = module.target_group_https.target_group_arn
   }
 
-  depends_on = [module.vpc]
+  depends_on             = [module.vpc]
   alb_http_tcp_listeners = var.alb_http_tcp_listeners
-  security_group_id = module.alb_security_group.alb_security_group_id
-  vpc_cidr = var.vpc_cidr
+  security_group_id      = module.alb_security_group.alb_security_group_id
+  vpc_cidr               = var.vpc_cidr
   #domain_name = "192-168-1-100.nip.io"
 }
 
-  module "target_group_http" {
+module "target_group_http" {
   source = "./modules/target_group"
 
-  name                = "project-intely-tg"
-  backend_port        = var.backend_port
-  backend_protocol    = var.backend_protocol
-  vpc_id              = module.vpc.vpc_id
-  target_type         = var.target_type
-  health_check_path   = var.health_check_path
+  name                  = "project-intely-tg"
+  backend_port          = var.backend_port
+  backend_protocol      = var.backend_protocol
+  vpc_id                = module.vpc.vpc_id
+  target_type           = var.target_type
+  health_check_path     = var.health_check_path
   health_check_protocol = var.health_check_protocol
-  health_check_matcher = var.health_check_matcher
+  health_check_matcher  = var.health_check_matcher
 
-  health_check_interval = var.health_check_interval
-  health_check_timeout  = var.health_check_timeout
-  health_check_healthy_threshold = var.health_check_healthy_threshold
+  health_check_interval            = var.health_check_interval
+  health_check_timeout             = var.health_check_timeout
+  health_check_healthy_threshold   = var.health_check_healthy_threshold
   health_check_unhealthy_threshold = var.health_check_unhealthy_threshold
 }
 
 module "target_group_https" {
   source = "./modules/target_group"
 
-  name                = "project-intely-tg-https"
-  backend_port        = 443
-  backend_protocol    = "HTTPS"
-  vpc_id              = module.vpc.vpc_id
-  target_type         = var.target_type
-  health_check_path   = var.health_check_path
+  name                  = "project-intely-tg-https"
+  backend_port          = 443
+  backend_protocol      = "HTTPS"
+  vpc_id                = module.vpc.vpc_id
+  target_type           = var.target_type
+  health_check_path     = var.health_check_path
   health_check_protocol = var.health_check_protocol
-  health_check_matcher = var.health_check_matcher
+  health_check_matcher  = var.health_check_matcher
 
-  health_check_interval = var.health_check_interval
-  health_check_timeout  = var.health_check_timeout
-  health_check_healthy_threshold = var.health_check_healthy_threshold
+  health_check_interval            = var.health_check_interval
+  health_check_timeout             = var.health_check_timeout
+  health_check_healthy_threshold   = var.health_check_healthy_threshold
   health_check_unhealthy_threshold = var.health_check_unhealthy_threshold
 }
-  
 
 
+
 module "alb_security_group" {
   source = "./modules/alb_security_group"
 
\ No newline at end of file
@@ -147,30 +147,30 @@
 
 module "rds" {
   source = "./modules/rds"
-#  count              = length(var.vpc_azs) # Una subred por cada AZ
-#  name        = "${var.name}-subnet-group-${count.index}" # Nombre único por subred
-  name               = var.name
-  engine             = var.engine
-  engine_version     = var.engine_version
-  instance_class     = var.instance_class
+  #  count              = length(var.vpc_azs) # Una subred por cada AZ
+  #  name        = "${var.name}-subnet-group-${count.index}" # Nombre único por subred
+  name           = var.name
+  engine         = var.engine
+  engine_version = var.engine_version
+  instance_class = var.instance_class
 
-  vpc_id             = module.vpc.vpc_id
-  subnets            = module.vpc.private_subnets
+  vpc_id  = module.vpc.vpc_id
+  subnets = module.vpc.private_subnets
 
-  database_name      = var.database_name
-  master_username    = var.rds_master_username
-  master_password    = var.rds_master_password
-  tags               = var.rds_tags
-  vpc_security_group_ids       = [aws_security_group.rds_sg.id]
+  database_name          = var.database_name
+  master_username        = var.rds_master_username
+  master_password        = var.rds_master_password
+  tags                   = var.rds_tags
+  vpc_security_group_ids = [aws_security_group.rds_sg.id]
 }
 
-resource "aws_security_group" "rds_sg" {  # Security group for RDS
+resource "aws_security_group" "rds_sg" { # Security group for RDS
   name        = "rds-security-group"
   description = "Security group for RDS instances"
   vpc_id      = module.vpc.vpc_id
 
   ingress {
-    from_port       = 3306  
+    from_port       = 3306
     to_port         = 3306
     protocol        = "tcp"
     security_groups = [module.alb_security_group.alb_security_group_id] # Allow traffic from ALB security group
\ No newline at end of file
terraform.tfvars
--- old/terraform.tfvars
+++ new/terraform.tfvars
@@ -14,11 +14,11 @@
 
 #alb_target_groups = [{
 target_group_name = "project-intely-tg"
-name             = "project-intely-tg"
-backend_protocol = "HTTP"
-backend_port     = 80
-target_type      = "instance"
- # }]
+name              = "project-intely-tg"
+backend_protocol  = "HTTP"
+backend_port      = 80
+target_type       = "instance"
+# }]
 
 alb_http_tcp_listeners = [
   {
\ No newline at end of file
@@ -38,23 +38,23 @@
 }
 
 # alb security group tfvars
-alb_security_group_name        = "project-intely-alb-sg"
-alb_security_group_description = "Security group for Project Intely ALB"
+alb_security_group_name                = "project-intely-alb-sg"
+alb_security_group_description         = "Security group for Project Intely ALB"
 alb_security_group_ingress_cidr_blocks = ["0.0.0.0/0"]
-alb_security_group_ingress_rules       = [{
-    from_port   = 80
-    to_port     = 80
-    protocol    = "tcp"
-    cidr_blocks = ["0.0.0.0/0"]
-    description = "Allow HTTP traffic from anywhere"
-  }]
+alb_security_group_ingress_rules = [{
+  from_port   = 80
+  to_port     = 80
+  protocol    = "tcp"
+  cidr_blocks = ["0.0.0.0/0"]
+  description = "Allow HTTP traffic from anywhere"
+}]
 alb_security_group_egress_rules = [
   {
     from_port   = 0
     to_port     = 0
     protocol    = "-1"
     cidr_blocks = ["0.0.0.0/0"]
-    description = "Allow all outbound traffic" 
+    description = "Allow all outbound traffic"
   }
 ]
 alb_security_group_tags = {
\ No newline at end of file
@@ -64,15 +64,15 @@
 }
 
 # webserver tfvars
-launch_template_name_prefix     = "my-template"
-launch_template_image_id        = "ami-0c0e147c706360bd7"
-launch_template_instance_type   = "t3.micro"
+launch_template_name_prefix   = "my-template"
+launch_template_image_id      = "ami-0c0e147c706360bd7"
+launch_template_instance_type = "t3.micro"
 launch_template_tags = {
   Name        = "project_intely-web-server"
   Terraform   = "true"
   Environment = "project_intely"
 }
-launch_template_volume_size     = 1
+launch_template_volume_size = 1
 
 # rds tfvars
 rds_tags = {
\ No newline at end of file
@@ -83,53 +83,53 @@
 name_rds = "project-intely-db"
 
 # autoscaling tfvars
-  autoscaling_name                      = "my-asg"
-  autoscaling_health_check_type         = "EC2"
-  autoscaling_health_check_grace_period = 300
+autoscaling_name                      = "my-asg"
+autoscaling_health_check_type         = "EC2"
+autoscaling_health_check_grace_period = 300
 
-  autoscaling_instance_type             = "t3.micro"
-  autoscaling_ami                       = "ami-0c0e147c706360bd7"
+autoscaling_instance_type = "t3.micro"
+autoscaling_ami           = "ami-0c0e147c706360bd7"
 
-  autoscaling_min_size         = 1
-  autoscaling_max_size         = 2
-  autoscaling_desired_capacity = 1
+autoscaling_min_size         = 1
+autoscaling_max_size         = 2
+autoscaling_desired_capacity = 1
 
-  autoscaling_tags = {
-    Terraform   = "true"
-    Environment = "project_intely"
-  }
+autoscaling_tags = {
+  Terraform   = "true"
+  Environment = "project_intely"
+}
 
-  health_check_healthy_threshold    = 2
-  health_check_interval             = 5
-  health_check_path                 = "/"
-  health_check_protocol             = "HTTP"
-  health_check_timeout              = 3
-  health_check_unhealthy_threshold  = 10
-  listener_port                     = 80
-  listener_protocol                 = "HTTP"
-  target_group_port                 = 80
-  target_group_protocol             = "HTTP"
+health_check_healthy_threshold   = 2
+health_check_interval            = 5
+health_check_path                = "/"
+health_check_protocol            = "HTTP"
+health_check_timeout             = 3
+health_check_unhealthy_threshold = 10
+listener_port                    = 80
+listener_protocol                = "HTTP"
+target_group_port                = 80
+target_group_protocol            = "HTTP"
 
-  # security group tfvars
-  security_group_name        = "project-intely-sg"
-  security_group_description = "Security group for Project Intely"
-  
-  security_group_ingress_cidr_blocks = ["0.0.0.0/0"]
-  security_group_ingress_rules       = [{
-    from_port   = 80
-    to_port     = 80
-    protocol    = "tcp"
-    cidr_blocks = ["0.0.0.0/0"]
-    description = "Allow HTTP traffic from anywhere"
-  }]
-  security_group_egress_rules        = [{
-    from_port   = 0
-    to_port     = 65535
-    protocol    = "tcp"
-    cidr_blocks = ["0.0.0.0/0"]
-    description = "Allow HTTP traffic from anywhere"
+# security group tfvars
+security_group_name        = "project-intely-sg"
+security_group_description = "Security group for Project Intely"
+
+security_group_ingress_cidr_blocks = ["0.0.0.0/0"]
+security_group_ingress_rules = [{
+  from_port   = 80
+  to_port     = 80
+  protocol    = "tcp"
+  cidr_blocks = ["0.0.0.0/0"]
+  description = "Allow HTTP traffic from anywhere"
 }]
-  security_group_tags = {
-    Terraform   = "true"
-    Environment = "project_intely"
-  }
\ No newline at end of file
+security_group_egress_rules = [{
+  from_port   = 0
+  to_port     = 65535
+  protocol    = "tcp"
+  cidr_blocks = ["0.0.0.0/0"]
+  description = "Allow HTTP traffic from anywhere"
+}]
+security_group_tags = {
+  Terraform   = "true"
+  Environment = "project_intely"
+}
\ No newline at end of file
variables.tf
--- old/variables.tf
+++ new/variables.tf
@@ -63,22 +63,22 @@
   default     = "application"
 }
 
-variable name {
+variable "name" {
   description = "Name of the ALB target group"
   type        = string
 }
 
-variable backend_protocol {
+variable "backend_protocol" {
   description = "Protocol for the ALB target group"
   type        = string
 }
 
-variable backend_port {
+variable "backend_port" {
   description = "Port for the ALB target group"
   type        = number
 }
 
-variable target_type { 
+variable "target_type" {
   description = "Type of target for the ALB target group"
   type        = string
 }
\ No newline at end of file
@@ -89,16 +89,16 @@
     protocol = string
   }))
   description = "List of HTTP/TCP listeners for the ALB"
-  default     = [
-  {
-    port     = 80
-    protocol = "HTTP"
-  },
-  {
-    port     = 443
-    protocol = "HTTPS"
-  }
-]  
+  default = [
+    {
+      port     = 80
+      protocol = "HTTP"
+    },
+    {
+      port     = 443
+      protocol = "HTTPS"
+    }
+  ]
 }
 
 # albgroup variables
\ No newline at end of file
@@ -123,7 +123,7 @@
 
 variable "alb_security_group_ingress_rules" {
   description = "Ingress rules for the security group"
-  type        = list(object({
+  type = list(object({
     from_port   = number
     to_port     = number
     protocol    = string
\ No newline at end of file
@@ -150,7 +150,7 @@
 
 variable "alb_security_group_egress_rules" {
   description = "Egress rules for the security group"
-  type        = list(object({
+  type = list(object({
     from_port   = number
     to_port     = number
     protocol    = string
\ No newline at end of file
@@ -161,7 +161,7 @@
     {
       from_port   = 0
       to_port     = 0
-      protocol    = "-1"  # -1 significa "todos los protocolos"
+      protocol    = "-1" # -1 significa "todos los protocolos"
       cidr_blocks = ["0.0.0.0/0"]
       description = "Allow all outbound traffic"
     }
\ No newline at end of file
@@ -336,26 +336,26 @@
 variable "target_group_name" {
   description = "target group name"
   type        = string
-  default = "project-intely-tg"
+  default     = "project-intely-tg"
 }
 
 variable "create_attachment" {
   description = "Whether to create a target group attachment"
   type        = bool
   default     = false
-  
+
 }
 
 variable "health_check_path" {
   description = "The path for the health check"
   type        = string
-  default = "/"
+  default     = "/"
 }
 
 variable "health_check_protocol" {
   description = "The protocol for the health check"
   type        = string
-  default = "HTTP"
+  default     = "HTTP"
 }
 
 variable "health_check_interval" {
\ No newline at end of file
@@ -373,13 +373,13 @@
 variable "health_check_healthy_threshold" {
   description = "The number of successful checks before considering the target healthy"
   type        = number
-  default = 2
+  default     = 2
 }
 
 variable "health_check_unhealthy_threshold" {
   description = "The number of failed checks before considering the target unhealthy"
   type        = number
-  default = 5
+  default     = 5
 }
 
 variable "health_check_matcher" {
\ No newline at end of file
@@ -428,9 +428,9 @@
   }
 }
 
-variable autoscaling_ingress_rules {
+variable "autoscaling_ingress_rules" {
   description = "Ingress rules for the autoscaling security group"
-  type        = list(object({
+  type = list(object({
     from_port   = number
     to_port     = number
     protocol    = string
\ No newline at end of file
@@ -444,9 +444,9 @@
   }]
 }
 # sobra
-variable autoscaling_egress_rules {
+variable "autoscaling_egress_rules" {
   description = "Egress rules for the autoscaling security group"
-  type        = list(object({
+  type = list(object({
     from_port   = number
     to_port     = number
     protocol    = string
\ No newline at end of file
@@ -460,13 +460,13 @@
   }]
 }
 
-variable autoscaling_ingress_cidr_blocks {
+variable "autoscaling_ingress_cidr_blocks" {
   description = "Ingress CIDR blocks for the autoscaling security group"
   type        = list(string)
-  default =  ["0.0.0.0/0"]
+  default     = ["0.0.0.0/0"]
 }
 # sobra 
-variable instance_tag_name {
+variable "instance_tag_name" {
   description = "The name tag for the instances"
   type        = string
   default     = "project_intely"
\ No newline at end of file
@@ -474,7 +474,7 @@
 
 variable "security_group_ingress_rules" {
   description = "Ingress rules for the security group"
-  type        = list(object({
+  type = list(object({
     from_port   = number
     to_port     = number
     protocol    = string
\ No newline at end of file
@@ -501,7 +501,7 @@
 
 variable "security_group_egress_rules" {
   description = "Egress rules for the security group"
-  type        = list(object({
+  type = list(object({
     from_port   = number
     to_port     = number
     protocol    = string
\ No newline at end of file
@@ -512,7 +512,7 @@
     {
       from_port   = 0
       to_port     = 0
-      protocol    = "-1"  # -1 significa "todos los protocolos"
+      protocol    = "-1" # -1 significa "todos los protocolos"
       cidr_blocks = ["0.0.0.0/0"]
       description = "Allow all outbound traffic"
     }
\ No newline at end of file
